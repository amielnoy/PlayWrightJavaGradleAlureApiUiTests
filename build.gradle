/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
}


repositories {
    mavenCentral()
    mavenLocal()
   // maven {
   //     url = uri('https://repo.maven.apache.org/maven2/')
   // }
    mavenCentral()
}



group = 'com.tandemdiabetes'
version = '0.0.1-SNAPSHOT'
description = 'Flixter'
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


def allureVersion = '2.18.1'
def junit5Version = "5.8.2"

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

    allure {
        autoconfigure = true
        aspectjweaver = true
        version = allureVersion

        clean = true

        useJUnit5 {
            version = allureVersion
        }
    }

dependencies {
    implementation 'com.microsoft.playwright:playwright:1.24.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testCompileOnly 'junit:junit:4.13.2'
    //testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
    implementation('io.qameta.allure:allure-junit5:2.18.1')
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit-platform
    implementation 'io.qameta.allure:allure-junit-platform:2.18.1'


    testImplementation("io.qameta.allure:allure-java-commons:2.18.1")

    //testImplementation("org.junit.jupiter:junit-jupiter-api:$junit5Version")
    //testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit5Version")
    //testImplementation("org.junit.jupiter:junit-jupiter-params:$junit5Version")
}

task webTests(type: Test) {
    test {
        useJUnitPlatform()
    }
    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    //maxParallelForks = (Runtime.getRuntime().availableProcessors() / 2).takeIf { it > 0 } ?: 1
}



